import { getIconByLinkName } from '@/components/utils/getIconsByLink';
import { useAppDispatch, useAppSelector } from '@/hooks/redux';
import { axiosClient } from '@/lib/utils/axiosInstance';
import { ExperienceDoc } from '@/models/experience.model';
import { ProjectDoc } from '@/models/project.model';
import { SocialDoc } from '@/models/social.model';
import { TechDoc } from '@/models/tech.model';
import { UserDoc } from '@/models/user.model';
import {
  setCurrentProjects,
  setCurrentUser,
  setExperiences,
  setSocialLinks,
  setTechStack,
} from '@/store/user.slice';
import {
  Avatar,
  Box,
  Code,
  Flex,
  HStack,
  Heading,
  Link,
  Text,
} from '@chakra-ui/react';
import { useUser } from '@clerk/nextjs';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect } from 'react';
import { BsGlobe } from 'react-icons/bs';
import { VscGithubAlt } from 'react-icons/vsc';

const Portfolio = () => {
  const router = useRouter();
  const { user } = useUser();
  const dispatch = useAppDispatch();
  const localUserState = useAppSelector((state) => state.currentUser.user);
  const localProjectsState = useAppSelector(
    (state) => state.currentUser.projects
  );
  const localExperiencesState = useAppSelector(
    (state) => state.currentUser.experiences
  );
  const localSocialsState = useAppSelector(
    (state) => state.currentUser.socials
  );
  const localTechStack = useAppSelector((state) => state.currentUser.techStack);

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const { data } = await axiosClient.get<{
          mongoUser: UserDoc | null;
          projects: ProjectDoc[];
          experiences: ExperienceDoc[];
          socials: SocialDoc[];
          techStack: TechDoc[];
        }>(`/user/${user?.id}`);
        if (!data.mongoUser) return;
        if (data.mongoUser) dispatch(setCurrentUser(data.mongoUser));
        if (data.projects) dispatch(setCurrentProjects(data.projects));
        if (data.experiences) dispatch(setExperiences(data.experiences));
        if (data.socials) dispatch(setSocialLinks(data.socials));
        if (data.techStack) dispatch(setTechStack(data.techStack));
      } catch (err: any) {
        console.log(err);
      }
    };
    fetchUserData();
  }, [dispatch, router.query.userId, user?.id]);

  return (
    <>
      <Head>
        <title>{`Portfolio ${
          user ? `| ${localUserState?.fullName}` : ''
        }`}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex
        minH={'full'}
        flexDir={'column'}
        gap={8}
        justifyContent={'flex-start'}
        alignItems={'center'}
        py={16}
      >
        <Flex
          flexDir={'column'}
          gap={12}
          minW={['100%', 'xl']}
          maxW={['100%', '2xl']}
          px={[4, 8]}
        >
          {localUserState?.fullName ? (
            <Flex gap={4} position={'relative'} alignItems={'center'}>
              <Avatar
                variant="square"
                loading="lazy"
                size="xl"
                src={user?.profileImageUrl}
                name={localUserState!.fullName}
              />
              <Heading
                bgClip={'text'}
                bgGradient="linear(to-r, blue.300, white)"
                fontSize={'2xl'}
              >
                {localUserState?.fullName}
              </Heading>
            </Flex>
          ) : null}
          {localUserState?.socials?.length !== 0 ? (
            <Flex gap={4} flexDir={'column'} alignItems={'flex-start'}>
              <Flex gap={2}>
                {localSocialsState.map((social) => (
                  <Link
                    key={social._id}
                    href={social.url}
                    color={'purple.400'}
                    target={'_blank'}
                    fontSize={'xl'}
                    _hover={{ textDecoration: 'none' }}
                  >
                    {getIconByLinkName(social.name)}
                  </Link>
                ))}
              </Flex>
              {localUserState?.oneLiner ? (
                <Text
                  bgGradient="linear(to-r, gray.400, gray.100)"
                  bgClip="text"
                  cursor={'default'}
                >
                  {localUserState?.oneLiner}
                </Text>
              ) : null}
            </Flex>
          ) : null}

          {localUserState?.about && localUserState.about !== '' ? (
            <Flex gap={2} flexDir={'column'}>
              <Heading
                bgClip={'text'}
                bgGradient="linear(to-r, blue.300, white)"
                fontSize={'2xl'}
              >
                About
              </Heading>
              <Text cursor={'default'} color={'gray.400'}>
                {localUserState?.about}
              </Text>
            </Flex>
          ) : null}
          {localUserState?.techStack &&
          localUserState?.techStack?.length !== 0 ? (
            <Flex flexDir={'column'} gap={4}>
              <Heading
                bgClip={'text'}
                bgGradient="linear(to-r, blue.300, white)"
                fontSize={'2xl'}
              >
                Tech Stack
              </Heading>
              <Flex flexDir={'row'} wrap={'wrap'} gap={2}>
                {localTechStack.map((tech) => (
                  <Code
                    bg={'transparent'}
                    size={'xs'}
                    mr={1}
                    color="purple.200"
                    key={tech._id}
                  >
                    {tech.name}
                  </Code>
                ))}
              </Flex>
            </Flex>
          ) : null}
          {localUserState?.experiences &&
          localUserState?.experiences?.length !== 0 ? (
            <Flex flexDir={'column'} gap={4}>
              <Heading
                bgClip={'text'}
                bgGradient="linear(to-r, blue.300, white)"
                fontSize={'2xl'}
              >
                Experiences
              </Heading>
              {localExperiencesState.map((experience) => (
                <Box
                  whiteSpace={'pre'}
                  gap={4}
                  p={8}
                  key={experience._id}
                  cursor={'default'}
                  my={2}
                >
                  <Flex whiteSpace={'pre-wrap'} gap={2} flexDir={'column'}>
                    <Flex
                      gap={12}
                      alignItems={'flex-start'}
                      justifyContent={'start'}
                    >
                      <Heading
                        color={'gray.300'}
                        fontWeight={'bold'}
                        alignSelf={'flex-start'}
                        fontSize={'md'}
                      >
                        {experience.companyName}
                      </Heading>

                      <Flex gap={1} flexDir={'column'}>
                        <Heading color={'gray.300'} fontSize={'sm'}>
                          {experience.position}
                        </Heading>
                        <Code
                          color={'purple.400'}
                          bg={'transparent'}
                          fontSize={'sm'}
                        >
                          {experience.startDate
                            ? `${new Date(experience.startDate).toLocaleString(
                                'default',
                                {
                                  month: 'long',
                                }
                              )} ${new Date(
                                experience.startDate
                              ).getFullYear()}`
                            : null}
                          -
                          {experience.present === false
                            ? `${new Date(experience.endDate).toLocaleString(
                                'default',
                                {
                                  month: 'long',
                                }
                              )} ${new Date(experience.endDate).getFullYear()}`
                            : 'Present'}
                        </Code>
                        <Text
                          fontSize={'sm'}
                          color={'gray.500'}
                          fontStyle={'italic'}
                        >
                          {experience.description}
                        </Text>
                      </Flex>
                    </Flex>
                  </Flex>
                </Box>
              ))}
            </Flex>
          ) : null}

          {localUserState?.projects ? (
            <Flex flexDir={'column'} gap={4}>
              <Heading
                bgClip={'text'}
                bgGradient="linear(to-r, blue.300, white)"
                fontSize={'2xl'}
              >
                Projects
              </Heading>
              {localProjectsState.map((project) => (
                <Box
                  key={project._id}
                  cursor={'default'}
                  _hover={{
                    borderColor: 'gray.800',
                  }}
                  transition="border-color 400ms"
                  borderColor={'gray.700'}
                  borderWidth={'1px'}
                  borderRadius={'xl'}
                  borderStyle={'solid'}
                  my={2}
                >
                  <Flex m={2} p={4} flexDir={'column'}>
                    <Flex justifyContent={'space-between'}>
                      <Heading color={'gray.300'} size={'md'}>
                        {project.title}
                      </Heading>
                      <HStack>
                        {project?.demoLink ? (
                          <Link target="_blank" href={project?.demoLink}>
                            <BsGlobe />
                          </Link>
                        ) : null}
                        <Link
                          target="_blank"
                          rel="noopener noreferer"
                          href={project?.githubLink}
                        >
                          <VscGithubAlt />
                        </Link>
                      </HStack>
                    </Flex>
                    <Text
                      fontStyle={'italic'}
                      my={4}
                      color={'gray.500'}
                      size={'xs'}
                    >
                      {project?.description}
                    </Text>

                    <Flex
                      maxW={'1/2'}
                      wrap={'wrap'}
                      flexDir={'row-reverse'}
                      justifyContent={'space-between'}
                    >
                      <Flex mt={1}>
                        {project?.techStack
                          ? project.techStack.map((tech) => (
                              <Code
                                bg={'transparent'}
                                size={'xs'}
                                mr={1}
                                color="purple.400"
                                key={Math.random()}
                              >
                                {tech}
                              </Code>
                            ))
                          : null}
                      </Flex>
                    </Flex>
                  </Flex>
                </Box>
              ))}
            </Flex>
          ) : null}
        </Flex>
      </Flex>
    </>
  );
};

export default Portfolio;

// export const getServerSideProps: GetServerSideProps = async (ctx) => {
//   try {
//     const { userId } = ctx.query;
//     const { data } = await axiosClient.get<{
//       mongoUser: UserDoc | null;
//       projects: ProjectDoc[];
//       experiences: ExperienceDoc[];
//       socials: SocialDoc[];
//       techStack: TechDoc[];
//     }>(`/user/${userId}`, {
//       params: {
//         userId,
//       },
//     });
//     return {
//       props: {
//         mongoUser: data.mongoUser,
//         projects: data.projects,
//         experiences: data.experiences,
//         socials: data.socials,
//         techStack: data.techStack,
//       },
//     };
//   } catch (err: any) {
//     console.log(err);
//   }
//   return {
//     props: {
//       user: null,
//     },
//   };
// };
