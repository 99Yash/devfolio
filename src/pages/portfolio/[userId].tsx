import { useAppDispatch, useAppSelector } from '@/hooks/redux';
import { axiosClient } from '@/lib/utils/axiosInstance';
import { ExperienceDoc } from '@/models/experience.model';
import { ProjectDoc } from '@/models/project.model';
import { SocialDoc } from '@/models/social.model';
import { TechDoc } from '@/models/tech.model';
import { UserDoc } from '@/models/user.model';
import { setCurrentUser } from '@/store/user.slice';
import {
  Avatar,
  Box,
  Button,
  Code,
  Drawer,
  DrawerBody,
  DrawerCloseButton,
  DrawerContent,
  DrawerOverlay,
  Flex,
  HStack,
  Heading,
  Text,
  VStack,
  useDisclosure,
} from '@chakra-ui/react';
import Head from 'next/head';
import { useEffect } from 'react';

import { getIconByLinkName } from '@/components/utils/getIconsByLink';
import { setExperiences } from '@/store/experiences.slice';
import { setProjects } from '@/store/projects.slice';
import { setSocialLinks } from '@/store/socials.slice';
import { setTechStack } from '@/store/tech.slice';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useState } from 'react';
import { BsGlobeAmericas } from 'react-icons/bs';
import { FaBars } from 'react-icons/fa';
import { VscGithubAlt } from 'react-icons/vsc';

const Portfolio = () => {
  const router = useRouter();
  const { isOpen, onOpen, onClose } = useDisclosure();
  const dispatch = useAppDispatch();
  const localUserState = useAppSelector((state) => state.currentUser.user);
  const localProjectsState = useAppSelector((state) => state.projects.projects);
  const localExperiencesState = useAppSelector(
    (state) => state.experiences.experiences
  );
  const localSocialsState = useAppSelector((state) => state.socials.socials);
  const localTechStack = useAppSelector((state) => state.techStack.techStack);
  const [profileImgUrl, setProfileImageUrl] = useState('');

  useEffect(() => {
    if (!router.query.userId) return;
    const fetchUserData = async () => {
      try {
        const { data } = await axiosClient.get<{
          mongoUser: UserDoc | null;
          projects: ProjectDoc[];
          experiences: ExperienceDoc[];
          socials: SocialDoc[];
          techStack: TechDoc[];
          clerkUserImage: string;
        }>(`/user/${router.query.userId}`);
        if (!data.mongoUser) return;
        if (data.mongoUser) dispatch(setCurrentUser(data.mongoUser));
        if (data.projects) dispatch(setProjects(data.projects));
        if (data.experiences) dispatch(setExperiences(data.experiences));
        if (data.socials) dispatch(setSocialLinks(data.socials));
        if (data.techStack) dispatch(setTechStack(data.techStack));
        if (data.clerkUserImage) setProfileImageUrl(data.clerkUserImage);
      } catch (err: any) {
        console.log(err);
      }
    };
    fetchUserData();
  }, [dispatch, router.query.userId]);

  return (
    <>
      <Head>
        <title>{`Portfolio ${
          router.query.userId
            ? `| ${localUserState ? localUserState?.fullName : ''}`
            : ''
        }`}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* hamburger */}
      <Flex
        display={{
          base: 'flex',
          sm: 'flex',
          md: 'none',
          lg: 'none',
          xl: 'none',
        }}
        justify={'end'}
      >
        <Button
          _hover={{
            background: 'transparent',
            color: 'pink.200',
          }}
          px={4}
          pt={6}
          color="yellow.600"
          bg={'transparent'}
          onClick={onOpen}
        >
          <FaBars />
        </Button>
        {isOpen && (
          <Drawer placement="right" onClose={onClose} isOpen={isOpen}>
            <DrawerOverlay />
            <DrawerContent bg={'black'}>
              <DrawerCloseButton
                _hover={{
                  background: 'transparent',
                  color: 'pink.200',
                }}
                _focus={{ outline: 'none' }}
              />
              <DrawerBody
                display={'flex'}
                justifyContent={'center'}
                alignItems={'center'}
              >
                <VStack spacing={10} align="center">
                  {localUserState?.about && localUserState.about !== '' ? (
                    <Link onClick={onClose} href="#about">
                      <Code
                        bgClip={'text'}
                        bgGradient="linear(to-r, white, orange.400)"
                      >
                        About
                      </Code>
                    </Link>
                  ) : null}
                  {localTechStack && localTechStack?.length !== 0 ? (
                    <Link onClick={onClose} href="#tech">
                      <Code
                        bgClip={'text'}
                        bgGradient="linear(to-r, white, orange.400)"
                      >
                        Tech Stack
                      </Code>
                    </Link>
                  ) : null}
                  {localExperiencesState?.length !== 0 ? (
                    <Link onClick={onClose} href="#experience">
                      <Code
                        bgClip={'text'}
                        bgGradient="linear(to-r, white, orange.400)"
                      >
                        Experiences
                      </Code>
                    </Link>
                  ) : null}
                  {localProjectsState?.length !== 0 ? (
                    <Link onClick={onClose} href="#projects">
                      <Code
                        bgClip={'text'}
                        bgGradient="linear(to-r, white, orange.400)"
                      >
                        Projects
                      </Code>
                    </Link>
                  ) : null}
                </VStack>
              </DrawerBody>
            </DrawerContent>
          </Drawer>
        )}
      </Flex>

      {/* nav bar anchor tags */}
      <Flex
        display={{
          base: 'none',
          md: 'flex',
          lg: 'flex',
          xl: 'flex',
          sm: 'none',
        }}
        pt={8}
        px={8}
        gap={8}
        justifyContent={'end'}
      >
        {localUserState?.about && localUserState.about !== '' ? (
          <Link href="#about">
            <Code
              fontSize={'md'}
              bgClip={'text'}
              bgGradient="linear(to-r, #2fe, #adf4dc)"
            >
              About
            </Code>
          </Link>
        ) : null}
        {localTechStack && localTechStack?.length !== 0 ? (
          <Link href="#tech">
            <Code
              fontSize={'md'}
              bgClip={'text'}
              bgGradient="linear(to-r, #2fe, #c1fde9)"
            >
              Tech Stack
            </Code>
          </Link>
        ) : null}
        {localExperiencesState?.length !== 0 ? (
          <Link href="#experience">
            <Code
              fontSize={'md'}
              bgClip={'text'}
              bgGradient="linear(to-r, #2fe, #c8eadf)"
            >
              Experiences
            </Code>
          </Link>
        ) : null}
        {localProjectsState?.length !== 0 ? (
          <Link href="#projects">
            <Code
              fontSize={'md'}
              bgClip={'text'}
              bgGradient="linear(to-r, #2fe, #d5ebe4)"
            >
              Projects
            </Code>
          </Link>
        ) : null}
      </Flex>

      <Flex
        minH={'full'}
        maxW={['full', '70vw']}
        flexDir={'column'}
        gap={8}
        justifyContent={'flex-start'}
        alignItems={'flex-start'}
        px={['4', '40']}
        py={16}
      >
        <Flex
          flexDir={'column'}
          gap={12}
          minW={['100%', 'xl']}
          maxW={['100%', '2xl']}
          px={[4, 8]}
        >
          {/* top user section */}
          {localUserState?.fullName ? (
            <Flex gap={4} position={'relative'} alignItems={'center'}>
              <Avatar
                variant="square"
                loading="lazy"
                size="xl"
                src={profileImgUrl}
                name={localUserState!.fullName}
              />
              <Heading
                bgClip={'text'}
                bgGradient="linear(to-r, gray.300, pink.200)"
                fontSize={'2xl'}
              >
                {localUserState?.fullName}
              </Heading>
            </Flex>
          ) : null}

          {localSocialsState?.length !== 0 ? (
            <Flex gap={4} flexDir={'column'} alignItems={'flex-start'}>
              <Flex
                display={{
                  base: 'none',
                  sm: 'none',
                  md: 'flex',
                  lg: 'flex',
                }}
                gap={4}
              >
                {localSocialsState.map((social) => (
                  <Link
                    className="text-lg"
                    key={social._id}
                    href={social.url}
                    target={'_blank'}
                  >
                    {getIconByLinkName(social.name)}
                  </Link>
                ))}
              </Flex>
              {localUserState?.oneLiner ? (
                <Text
                  bgGradient="linear(to-r, gray.400, gray.100)"
                  bgClip="text"
                  cursor={'default'}
                >
                  {localUserState?.oneLiner}
                </Text>
              ) : null}
            </Flex>
          ) : null}

          {/* user's about */}
          {localUserState?.about && localUserState.about !== '' ? (
            <Flex id="about" gap={2} flexDir={'column'}>
              <Heading
                bgClip={'text'}
                bgGradient="linear(to-r, blue.300, white)"
                fontSize={'2xl'}
              >
                About
              </Heading>
              <Text
                bgGradient="linear(to-r, gray.300, gray.200)"
                bgClip="text"
                cursor={'default'}
              >
                {localUserState?.about}.
              </Text>
            </Flex>
          ) : null}

          {/* users' tech */}
          {localTechStack && localTechStack?.length !== 0 ? (
            <Flex
              id="tech"
              whiteSpace={'pre-wrap'}
              wrap={'wrap'}
              flexDir={'column'}
              gap={4}
            >
              <Heading
                bgClip={'text'}
                bgGradient="linear(to-r, blue.300, white)"
                fontSize={'2xl'}
              >
                Tech Stack
              </Heading>
              <Flex wrap={'wrap'} flexDir={'row'} gap={2}>
                {localTechStack.map((tech) => (
                  <Code
                    bg={'transparent'}
                    size={'xs'}
                    mr={1}
                    bgClip={'text'}
                    bgGradient="linear(to-r, yellow.300, blue.100)"
                    key={tech._id}
                  >
                    {tech.name}
                  </Code>
                ))}
              </Flex>
            </Flex>
          ) : null}

          {/* user's experiences */}

          {localExperiencesState && localExperiencesState?.length !== 0 ? (
            <Flex id="experiences" flexDir={'column'} gap={4}>
              <Heading
                bgClip={'text'}
                bgGradient="linear(to-r, blue.300, white)"
                fontSize={'2xl'}
              >
                Experiences
              </Heading>
              <>
                {localExperiencesState.map((experience) => (
                  <Box
                    whiteSpace={'pre'}
                    gap={4}
                    p={8}
                    key={experience._id}
                    cursor={'default'}
                    my={2}
                  >
                    <Flex whiteSpace={'pre-wrap'} gap={2} flexDir={'column'}>
                      <Flex
                        gap={12}
                        alignItems={'flex-start'}
                        justifyContent={'start'}
                      >
                        <Heading
                          bgClip={'text'}
                          bgGradient="linear(to-r, gray.300, gray.300)"
                          fontWeight={'bold'}
                          alignSelf={'flex-start'}
                          fontSize={'md'}
                        >
                          {experience.companyName}
                        </Heading>

                        <Flex gap={1} flexDir={'column'}>
                          <Heading
                            bgClip={'text'}
                            bgGradient="linear(to-r, gray.400, white)"
                            fontSize={'sm'}
                          >
                            {experience.position}
                          </Heading>
                          <Code
                            bgClip={'text'}
                            bgGradient="linear(to-r, blue.300, green.300)"
                            fontSize={'sm'}
                          >
                            {experience.startDate
                              ? `${new Date(
                                  experience.startDate
                                ).toLocaleString('default', {
                                  month: 'long',
                                })} ${new Date(
                                  experience.startDate
                                ).getFullYear()}`
                              : null}
                            -
                            {experience.present === false
                              ? `${new Date(experience.endDate).toLocaleString(
                                  'default',
                                  {
                                    month: 'long',
                                  }
                                )} ${new Date(
                                  experience.endDate
                                ).getFullYear()}`
                              : 'Present'}
                          </Code>
                          <Text
                            fontSize={'sm'}
                            color={'gray.500'}
                            fontStyle={'italic'}
                          >
                            {experience.description}
                          </Text>
                        </Flex>
                      </Flex>
                    </Flex>
                  </Box>
                ))}
              </>
            </Flex>
          ) : null}

          {/* user's projects */}
          {localProjectsState && localProjectsState?.length > 0 ? (
            <Flex id="projects" flexDir={'column'} gap={4}>
              <Heading
                bgClip={'text'}
                bgGradient="linear(to-r, blue.300, white)"
                fontSize={'2xl'}
              >
                Projects
              </Heading>
              {localProjectsState.map((project) => (
                <Box
                  key={project._id}
                  cursor={'default'}
                  _hover={{
                    borderColor: 'gray.800',
                  }}
                  transition="border-color 400ms"
                  borderColor={'gray.700'}
                  borderWidth={'1px'}
                  borderRadius={'xl'}
                  borderStyle={'solid'}
                  my={2}
                >
                  <Flex m={2} p={4} flexDir={'column'}>
                    <Flex justifyContent={'space-between'}>
                      <Heading color={'gray.300'} size={'md'}>
                        {project.title}
                      </Heading>

                      <HStack>
                        {project?.demoLink ? (
                          <Link target="_blank" href={project?.demoLink}>
                            <BsGlobeAmericas />
                          </Link>
                        ) : null}
                        <Link
                          target="_blank"
                          rel="noopener noreferer"
                          href={project?.githubLink}
                        >
                          <VscGithubAlt />
                        </Link>
                      </HStack>
                    </Flex>

                    <Text
                      fontStyle={'italic'}
                      my={4}
                      color={'gray.500'}
                      size={'xs'}
                    >
                      {project?.description}
                    </Text>

                    <Flex
                      maxW={'1/2'}
                      wrap={'wrap'}
                      flexDir={'row-reverse'}
                      justifyContent={'space-between'}
                    >
                      <Flex mt={1}>
                        {project?.techStack
                          ? project.techStack.map((tech) => (
                              <Code
                                bg={'transparent'}
                                size={'xs'}
                                mr={1}
                                bgClip={'text'}
                                bgGradient="linear(to-r, yellow.300, blue.300)"
                                key={Math.random()}
                              >
                                {tech}
                              </Code>
                            ))
                          : null}
                      </Flex>
                    </Flex>
                  </Flex>
                </Box>
              ))}
            </Flex>
          ) : null}

          {/* user's socials in case of mobile view */}
          {localSocialsState?.length !== 0 ? (
            <Flex
              gap={4}
              flexDir={'column'}
              alignItems={'center'}
              justifyContent={'center'}
            >
              <Flex
                display={{
                  base: 'flex',
                  sm: 'flex',
                  md: 'none',
                  lg: 'none',
                }}
                gap={4}
              >
                {localSocialsState.map((social) => (
                  <Link
                    className="text-xl hover:-mt-2 hover:text-green transition-all duration-300 "
                    key={social._id}
                    href={social.url}
                    target={'_blank'}
                  >
                    {getIconByLinkName(social.name)}
                  </Link>
                ))}
              </Flex>
            </Flex>
          ) : null}
          <p className="text-gray-400 ">
            Powered by{' '}
            <Link
              className="text-purple-400"
              href="https://devfolio-client.vercel.app"
            >
              Devfolio
            </Link>
          </p>
        </Flex>

        {/* <Flex
          minH={'100vh'}
          flexDir={'column'}
          gap={[4]}
          justifyContent={'flex-start'}
          py={[0, 12]}
          px={[4, 8]}
        >
          <Code
            bgClip={'text'}
            fontSize={['xl', 'lg']}
            fontWeight={'extrabold'}
            bgGradient="linear(to-r, green.400, green.600)"
          >
            Hi, my name is
          </Code>
          <Heading
            bgClip={'text'}
            bgGradient="linear(to-r, gray.300, gray.500)"
            fontSize={['4xl', '6xl']}
          >
            {localUserState?.fullName}.
          </Heading>
          <Heading
            fontSize={['4xl', '6xl']}
            bgClip={'text'}
            bgGradient="linear(to-r, #ffff0097, #ffff00cf)"
          >
            I build things for the web.
          </Heading>
          <Text
            bgClip={'text'}
            maxW={['full', '80%']}
            fontWeight={'medium'}
            bgGradient="linear(to-r, #ffff0084, #c19f9f)"
            fontSize={['md', 'xl']}
          >
            {localUserState?.oneLiner}
          </Text>
        </Flex>

        <Flex
          minH={'100vh'}
          flexDir={'column'}
          gap={[8]}
          py={[0, 8]}
          px={[4, 8]}
        >
          <Heading color={'gray.400'}>About me</Heading>
          <Text
            color={'#ffffff86'}
            fontSize={['md', 'lg']}
            lineHeight={'tall'}
            fontWeight={'normal'}
          >
            {localUserState?.about}
          </Text> */}

        {/* <Tilt>
            <Flex
              justifyContent={'space-between'}
              alignItems={'center'}
              gap={[4]}
            >
              <Image
                width={250}
                height={250}
                src={profileImgUrl}
                alt={`${localUserState?.fullName}'s Picture`}
              />
            </Flex>
          </Tilt> */}

        {/* todo: fix */}
        {/* {localTechStack ? (
            <Flex flexDir={['column']} color={'gray.400'} gap={4}>
              <Text fontStyle={'italic'} fontWeight={'bold'}>
                Here&apos;s the Tech I&apos;ve been working with:
              </Text>
              <Flex flexDir={['row', 'column']}>
                <Flex flexDir={'column'} gap={4} />
                <List color={'#ffffff86'} spacing={3}>
                  {localTechStack
                    .filter((_, index) => index % 2 === 0) // Filter even-indexed elements for the left column
                    .map((tech) => (
                      <ListItem key={tech._id}>
                        <ListIcon as={MdSettings} color="gray.500" />
                        {tech.name}
                      </ListItem>
                    ))}
                </List>
              </Flex>
              <Flex flexDir={'column'} gap={4}>
                <List color={'#ffffff86'} spacing={3}>
                  {localTechStack
                    .filter((_, index) => index % 2 !== 0) // Filter odd-indexed elements for the right column
                    .map((tech) => (
                      <ListItem key={tech._id}>
                        <ListIcon as={MdSettings} color="gray.500" />
                        {tech.name}
                      </ListItem>
                    ))}
                </List>
              </Flex>
            </Flex>
          ) : (
            <Spinner />
          )} */}
      </Flex>
      {/* </Flex> */}
    </>
  );
};
export default Portfolio;
